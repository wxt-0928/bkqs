{"ast":null,"code":"/*\r\nLanguage: Rust\r\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\r\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\r\nWebsite: https://www.rust-lang.org\r\nCategory: common, system\r\n*/\n\n/** @type LanguageFn */\n\nfunction rust(hljs) {\n  const regex = hljs.regex;\n  // ============================================\n  // Added to support the r# keyword, which is a raw identifier in Rust.\n  const RAW_IDENTIFIER = /(r#)?/;\n  const UNDERSCORE_IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.UNDERSCORE_IDENT_RE);\n  const IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.IDENT_RE);\n  // ============================================\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: regex.concat(/\\b/, /(?!let|for|while|if|else|match\\b)/, IDENT_RE, regex.lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\"abstract\", \"as\", \"async\", \"await\", \"become\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"do\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"final\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\", \"match\", \"mod\", \"move\", \"mut\", \"override\", \"priv\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"typeof\", \"union\", \"unsafe\", \"unsized\", \"use\", \"virtual\", \"where\", \"while\", \"yield\"];\n  const LITERALS = [\"true\", \"false\", \"Some\", \"None\", \"Ok\", \"Err\"];\n  const BUILTINS = [\n  // functions\n  'drop ',\n  // traits\n  \"Copy\", \"Send\", \"Sized\", \"Sync\", \"Drop\", \"Fn\", \"FnMut\", \"FnOnce\", \"ToOwned\", \"Clone\", \"Debug\", \"PartialEq\", \"PartialOrd\", \"Eq\", \"Ord\", \"AsRef\", \"AsMut\", \"Into\", \"From\", \"Default\", \"Iterator\", \"Extend\", \"IntoIterator\", \"DoubleEndedIterator\", \"ExactSizeIterator\", \"SliceConcatExt\", \"ToString\",\n  // macros\n  \"assert!\", \"assert_eq!\", \"bitflags!\", \"bytes!\", \"cfg!\", \"col!\", \"concat!\", \"concat_idents!\", \"debug_assert!\", \"debug_assert_eq!\", \"env!\", \"eprintln!\", \"panic!\", \"file!\", \"format!\", \"format_args!\", \"include_bytes!\", \"include_str!\", \"line!\", \"local_data_key!\", \"module_path!\", \"option_env!\", \"print!\", \"println!\", \"select!\", \"stringify!\", \"try!\", \"unimplemented!\", \"unreachable!\", \"vec!\", \"write!\", \"writeln!\", \"macro_rules!\", \"assert_ne!\", \"debug_assert_ne!\"];\n  const TYPES = [\"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"f32\", \"f64\", \"str\", \"char\", \"bool\", \"Box\", \"Option\", \"Result\", \"String\", \"Vec\"];\n  return {\n    name: 'Rust',\n    aliases: ['rs'],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\\\*', '\\\\*/', {\n      contains: ['self']\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      begin: /b?\"/,\n      illegal: null\n    }), {\n      className: 'string',\n      variants: [{\n        begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n      }, {\n        begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n      }]\n    }, {\n      className: 'symbol',\n      begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n    }, {\n      className: 'number',\n      variants: [{\n        begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + NUMBER_SUFFIX\n      }],\n      relevance: 0\n    }, {\n      begin: [/fn/, /\\s+/, UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.function\"\n      }\n    }, {\n      className: 'meta',\n      begin: '#!?\\\\[',\n      end: '\\\\]',\n      contains: [{\n        className: 'string',\n        begin: /\"/,\n        end: /\"/,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }]\n    }, {\n      begin: [/let/, /\\s+/, /(?:mut\\s+)?/, UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"keyword\",\n        4: \"variable\"\n      }\n    },\n    // must come before impl/for rule later\n    {\n      begin: [/for/, /\\s+/, UNDERSCORE_IDENT_RE, /\\s+/, /in/],\n      className: {\n        1: \"keyword\",\n        3: \"variable\",\n        5: \"keyword\"\n      }\n    }, {\n      begin: [/type/, /\\s+/, UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: [/(?:trait|enum|struct|union|impl|for)/, /\\s+/, UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: {\n        keyword: \"Self\",\n        built_in: BUILTINS,\n        type: TYPES\n      }\n    }, {\n      className: \"punctuation\",\n      begin: '->'\n    }, FUNCTION_INVOKE]\n  };\n}\nmodule.exports = rust;","map":{"version":3,"names":["rust","hljs","regex","RAW_IDENTIFIER","UNDERSCORE_IDENT_RE","concat","IDENT_RE","FUNCTION_INVOKE","className","relevance","begin","lookahead","NUMBER_SUFFIX","KEYWORDS","LITERALS","BUILTINS","TYPES","name","aliases","keywords","$pattern","type","keyword","literal","built_in","illegal","contains","C_LINE_COMMENT_MODE","COMMENT","inherit","QUOTE_STRING_MODE","variants","end","BACKSLASH_ESCAPE","module","exports"],"sources":["D:/sdbkqs/bkqs/sdbkqs/vue/node_modules/highlight.js/lib/languages/rust.js"],"sourcesContent":["/*\r\nLanguage: Rust\r\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\r\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\r\nWebsite: https://www.rust-lang.org\r\nCategory: common, system\r\n*/\r\n\r\n/** @type LanguageFn */\r\n\r\nfunction rust(hljs) {\r\n  const regex = hljs.regex;\r\n  // ============================================\r\n  // Added to support the r# keyword, which is a raw identifier in Rust.\r\n  const RAW_IDENTIFIER = /(r#)?/;\r\n  const UNDERSCORE_IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.UNDERSCORE_IDENT_RE);\r\n  const IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.IDENT_RE);\r\n  // ============================================\r\n  const FUNCTION_INVOKE = {\r\n    className: \"title.function.invoke\",\r\n    relevance: 0,\r\n    begin: regex.concat(\r\n      /\\b/,\r\n      /(?!let|for|while|if|else|match\\b)/,\r\n      IDENT_RE,\r\n      regex.lookahead(/\\s*\\(/))\r\n  };\r\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\r\n  const KEYWORDS = [\r\n    \"abstract\",\r\n    \"as\",\r\n    \"async\",\r\n    \"await\",\r\n    \"become\",\r\n    \"box\",\r\n    \"break\",\r\n    \"const\",\r\n    \"continue\",\r\n    \"crate\",\r\n    \"do\",\r\n    \"dyn\",\r\n    \"else\",\r\n    \"enum\",\r\n    \"extern\",\r\n    \"false\",\r\n    \"final\",\r\n    \"fn\",\r\n    \"for\",\r\n    \"if\",\r\n    \"impl\",\r\n    \"in\",\r\n    \"let\",\r\n    \"loop\",\r\n    \"macro\",\r\n    \"match\",\r\n    \"mod\",\r\n    \"move\",\r\n    \"mut\",\r\n    \"override\",\r\n    \"priv\",\r\n    \"pub\",\r\n    \"ref\",\r\n    \"return\",\r\n    \"self\",\r\n    \"Self\",\r\n    \"static\",\r\n    \"struct\",\r\n    \"super\",\r\n    \"trait\",\r\n    \"true\",\r\n    \"try\",\r\n    \"type\",\r\n    \"typeof\",\r\n    \"union\",\r\n    \"unsafe\",\r\n    \"unsized\",\r\n    \"use\",\r\n    \"virtual\",\r\n    \"where\",\r\n    \"while\",\r\n    \"yield\"\r\n  ];\r\n  const LITERALS = [\r\n    \"true\",\r\n    \"false\",\r\n    \"Some\",\r\n    \"None\",\r\n    \"Ok\",\r\n    \"Err\"\r\n  ];\r\n  const BUILTINS = [\r\n    // functions\r\n    'drop ',\r\n    // traits\r\n    \"Copy\",\r\n    \"Send\",\r\n    \"Sized\",\r\n    \"Sync\",\r\n    \"Drop\",\r\n    \"Fn\",\r\n    \"FnMut\",\r\n    \"FnOnce\",\r\n    \"ToOwned\",\r\n    \"Clone\",\r\n    \"Debug\",\r\n    \"PartialEq\",\r\n    \"PartialOrd\",\r\n    \"Eq\",\r\n    \"Ord\",\r\n    \"AsRef\",\r\n    \"AsMut\",\r\n    \"Into\",\r\n    \"From\",\r\n    \"Default\",\r\n    \"Iterator\",\r\n    \"Extend\",\r\n    \"IntoIterator\",\r\n    \"DoubleEndedIterator\",\r\n    \"ExactSizeIterator\",\r\n    \"SliceConcatExt\",\r\n    \"ToString\",\r\n    // macros\r\n    \"assert!\",\r\n    \"assert_eq!\",\r\n    \"bitflags!\",\r\n    \"bytes!\",\r\n    \"cfg!\",\r\n    \"col!\",\r\n    \"concat!\",\r\n    \"concat_idents!\",\r\n    \"debug_assert!\",\r\n    \"debug_assert_eq!\",\r\n    \"env!\",\r\n    \"eprintln!\",\r\n    \"panic!\",\r\n    \"file!\",\r\n    \"format!\",\r\n    \"format_args!\",\r\n    \"include_bytes!\",\r\n    \"include_str!\",\r\n    \"line!\",\r\n    \"local_data_key!\",\r\n    \"module_path!\",\r\n    \"option_env!\",\r\n    \"print!\",\r\n    \"println!\",\r\n    \"select!\",\r\n    \"stringify!\",\r\n    \"try!\",\r\n    \"unimplemented!\",\r\n    \"unreachable!\",\r\n    \"vec!\",\r\n    \"write!\",\r\n    \"writeln!\",\r\n    \"macro_rules!\",\r\n    \"assert_ne!\",\r\n    \"debug_assert_ne!\"\r\n  ];\r\n  const TYPES = [\r\n    \"i8\",\r\n    \"i16\",\r\n    \"i32\",\r\n    \"i64\",\r\n    \"i128\",\r\n    \"isize\",\r\n    \"u8\",\r\n    \"u16\",\r\n    \"u32\",\r\n    \"u64\",\r\n    \"u128\",\r\n    \"usize\",\r\n    \"f32\",\r\n    \"f64\",\r\n    \"str\",\r\n    \"char\",\r\n    \"bool\",\r\n    \"Box\",\r\n    \"Option\",\r\n    \"Result\",\r\n    \"String\",\r\n    \"Vec\"\r\n  ];\r\n  return {\r\n    name: 'Rust',\r\n    aliases: [ 'rs' ],\r\n    keywords: {\r\n      $pattern: hljs.IDENT_RE + '!?',\r\n      type: TYPES,\r\n      keyword: KEYWORDS,\r\n      literal: LITERALS,\r\n      built_in: BUILTINS\r\n    },\r\n    illegal: '</',\r\n    contains: [\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.COMMENT('/\\\\*', '\\\\*/', { contains: [ 'self' ] }),\r\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n        begin: /b?\"/,\r\n        illegal: null\r\n      }),\r\n      {\r\n        className: 'string',\r\n        variants: [\r\n          { begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/ },\r\n          { begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ }\r\n        ]\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\r\n      },\r\n      {\r\n        className: 'number',\r\n        variants: [\r\n          { begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX },\r\n          { begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX },\r\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },\r\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'\r\n                   + NUMBER_SUFFIX }\r\n        ],\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: [\r\n          /fn/,\r\n          /\\s+/,\r\n          UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.function\"\r\n        }\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: '#!?\\\\[',\r\n        end: '\\\\]',\r\n        contains: [\r\n          {\r\n            className: 'string',\r\n            begin: /\"/,\r\n            end: /\"/,\r\n            contains: [\r\n              hljs.BACKSLASH_ESCAPE\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        begin: [\r\n          /let/,\r\n          /\\s+/,\r\n          /(?:mut\\s+)?/,\r\n          UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"keyword\",\r\n          4: \"variable\"\r\n        }\r\n      },\r\n      // must come before impl/for rule later\r\n      {\r\n        begin: [\r\n          /for/,\r\n          /\\s+/,\r\n          UNDERSCORE_IDENT_RE,\r\n          /\\s+/,\r\n          /in/\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"variable\",\r\n          5: \"keyword\"\r\n        }\r\n      },\r\n      {\r\n        begin: [\r\n          /type/,\r\n          /\\s+/,\r\n          UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.class\"\r\n        }\r\n      },\r\n      {\r\n        begin: [\r\n          /(?:trait|enum|struct|union|impl|for)/,\r\n          /\\s+/,\r\n          UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.class\"\r\n        }\r\n      },\r\n      {\r\n        begin: hljs.IDENT_RE + '::',\r\n        keywords: {\r\n          keyword: \"Self\",\r\n          built_in: BUILTINS,\r\n          type: TYPES\r\n        }\r\n      },\r\n      {\r\n        className: \"punctuation\",\r\n        begin: '->'\r\n      },\r\n      FUNCTION_INVOKE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = rust;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}