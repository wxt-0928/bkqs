{"ast":null,"code":"/*\r\nLanguage: ReasonML\r\nDescription: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.\r\nWebsite: https://reasonml.github.io\r\nAuthor: Gidi Meir Morris <oss@gidi.io>\r\nCategory: functional\r\n*/\nfunction reasonml(hljs) {\n  const BUILT_IN_TYPES = [\"array\", \"bool\", \"bytes\", \"char\", \"exn|5\", \"float\", \"int\", \"int32\", \"int64\", \"list\", \"lazy_t|5\", \"nativeint|5\", \"ref\", \"string\", \"unit\"];\n  return {\n    name: 'ReasonML',\n    aliases: ['re'],\n    keywords: {\n      $pattern: /[a-z_]\\w*!?/,\n      keyword: [\"and\", \"as\", \"asr\", \"assert\", \"begin\", \"class\", \"constraint\", \"do\", \"done\", \"downto\", \"else\", \"end\", \"esfun\", \"exception\", \"external\", \"for\", \"fun\", \"function\", \"functor\", \"if\", \"in\", \"include\", \"inherit\", \"initializer\", \"land\", \"lazy\", \"let\", \"lor\", \"lsl\", \"lsr\", \"lxor\", \"mod\", \"module\", \"mutable\", \"new\", \"nonrec\", \"object\", \"of\", \"open\", \"or\", \"pri\", \"pub\", \"rec\", \"sig\", \"struct\", \"switch\", \"then\", \"to\", \"try\", \"type\", \"val\", \"virtual\", \"when\", \"while\", \"with\"],\n      built_in: BUILT_IN_TYPES,\n      literal: [\"true\", \"false\"]\n    },\n    illegal: /(:-|:=|\\$\\{|\\+=)/,\n    contains: [{\n      scope: 'literal',\n      match: /\\[(\\|\\|)?\\]|\\(\\)/,\n      relevance: 0\n    }, hljs.C_LINE_COMMENT_MODE, hljs.COMMENT(/\\/\\*/, /\\*\\//, {\n      illegal: /^(#,\\/\\/)/\n    }), {\n      /* type variable */\n      scope: 'symbol',\n      match: /\\'[A-Za-z_](?!\\')[\\w\\']*/\n      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n    }, {\n      /* polymorphic variant */\n      scope: 'type',\n      match: /`[A-Z][\\w\\']*/\n    }, {\n      /* module or constructor */\n      scope: 'type',\n      match: /\\b[A-Z][\\w\\']*/,\n      relevance: 0\n    }, {\n      /* don't color identifiers, but safely catch all identifiers with ' */\n      match: /[a-z_]\\w*\\'[\\w\\']*/,\n      relevance: 0\n    }, {\n      scope: 'operator',\n      match: /\\s+(\\|\\||\\+[\\+\\.]?|\\*[\\*\\/\\.]?|\\/[\\.]?|\\.\\.\\.|\\|>|&&|===?)\\s+/,\n      relevance: 0\n    }, hljs.inherit(hljs.APOS_STRING_MODE, {\n      scope: 'string',\n      relevance: 0\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    }), {\n      scope: 'number',\n      variants: [{\n        match: /\\b0[xX][a-fA-F0-9_]+[Lln]?/\n      }, {\n        match: /\\b0[oO][0-7_]+[Lln]?/\n      }, {\n        match: /\\b0[bB][01_]+[Lln]?/\n      }, {\n        match: /\\b[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/\n      }],\n      relevance: 0\n    }]\n  };\n}\nmodule.exports = reasonml;","map":{"version":3,"names":["reasonml","hljs","BUILT_IN_TYPES","name","aliases","keywords","$pattern","keyword","built_in","literal","illegal","contains","scope","match","relevance","C_LINE_COMMENT_MODE","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","variants","module","exports"],"sources":["D:/软件工程/bkqs/sdbkqs/vue/node_modules/highlight.js/lib/languages/reasonml.js"],"sourcesContent":["/*\r\nLanguage: ReasonML\r\nDescription: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.\r\nWebsite: https://reasonml.github.io\r\nAuthor: Gidi Meir Morris <oss@gidi.io>\r\nCategory: functional\r\n*/\r\nfunction reasonml(hljs) {\r\n  const BUILT_IN_TYPES = [\r\n    \"array\",\r\n    \"bool\",\r\n    \"bytes\",\r\n    \"char\",\r\n    \"exn|5\",\r\n    \"float\",\r\n    \"int\",\r\n    \"int32\",\r\n    \"int64\",\r\n    \"list\",\r\n    \"lazy_t|5\",\r\n    \"nativeint|5\",\r\n    \"ref\",\r\n    \"string\",\r\n    \"unit\",\r\n  ];\r\n  return {\r\n    name: 'ReasonML',\r\n    aliases: [ 're' ],\r\n    keywords: {\r\n      $pattern:  /[a-z_]\\w*!?/,\r\n      keyword: [\r\n        \"and\",\r\n        \"as\",\r\n        \"asr\",\r\n        \"assert\",\r\n        \"begin\",\r\n        \"class\",\r\n        \"constraint\",\r\n        \"do\",\r\n        \"done\",\r\n        \"downto\",\r\n        \"else\",\r\n        \"end\",\r\n        \"esfun\",\r\n        \"exception\",\r\n        \"external\",\r\n        \"for\",\r\n        \"fun\",\r\n        \"function\",\r\n        \"functor\",\r\n        \"if\",\r\n        \"in\",\r\n        \"include\",\r\n        \"inherit\",\r\n        \"initializer\",\r\n        \"land\",\r\n        \"lazy\",\r\n        \"let\",\r\n        \"lor\",\r\n        \"lsl\",\r\n        \"lsr\",\r\n        \"lxor\",\r\n        \"mod\",\r\n        \"module\",\r\n        \"mutable\",\r\n        \"new\",\r\n        \"nonrec\",\r\n        \"object\",\r\n        \"of\",\r\n        \"open\",\r\n        \"or\",\r\n        \"pri\",\r\n        \"pub\",\r\n        \"rec\",\r\n        \"sig\",\r\n        \"struct\",\r\n        \"switch\",\r\n        \"then\",\r\n        \"to\",\r\n        \"try\",\r\n        \"type\",\r\n        \"val\",\r\n        \"virtual\",\r\n        \"when\",\r\n        \"while\",\r\n        \"with\",\r\n      ],\r\n      built_in: BUILT_IN_TYPES,\r\n      literal: [\"true\", \"false\"],\r\n    },\r\n    illegal: /(:-|:=|\\$\\{|\\+=)/,\r\n    contains: [\r\n      {\r\n        scope: 'literal',\r\n        match: /\\[(\\|\\|)?\\]|\\(\\)/,\r\n        relevance: 0\r\n      },\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.COMMENT(/\\/\\*/, /\\*\\//, { illegal: /^(#,\\/\\/)/ }),\r\n      { /* type variable */\r\n        scope: 'symbol',\r\n        match: /\\'[A-Za-z_](?!\\')[\\w\\']*/\r\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\r\n      },\r\n      { /* polymorphic variant */\r\n        scope: 'type',\r\n        match: /`[A-Z][\\w\\']*/\r\n      },\r\n      { /* module or constructor */\r\n        scope: 'type',\r\n        match: /\\b[A-Z][\\w\\']*/,\r\n        relevance: 0\r\n      },\r\n      { /* don't color identifiers, but safely catch all identifiers with ' */\r\n      match: /[a-z_]\\w*\\'[\\w\\']*/,\r\n        relevance: 0\r\n      },\r\n      {\r\n        scope: 'operator',\r\n        match: /\\s+(\\|\\||\\+[\\+\\.]?|\\*[\\*\\/\\.]?|\\/[\\.]?|\\.\\.\\.|\\|>|&&|===?)\\s+/,\r\n        relevance: 0\r\n      },      \r\n      hljs.inherit(hljs.APOS_STRING_MODE, {\r\n        scope: 'string',\r\n        relevance: 0\r\n      }),\r\n      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),\r\n      {\r\n        scope: 'number',\r\n        variants: [\r\n          { match: /\\b0[xX][a-fA-F0-9_]+[Lln]?/ },\r\n          { match: /\\b0[oO][0-7_]+[Lln]?/ },\r\n          { match: /\\b0[bB][01_]+[Lln]?/ },\r\n          { match: /\\b[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ },\r\n        ],\r\n        relevance: 0\r\n      },\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = reasonml;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACC,IAAI,EAAE;EACtB,MAAMC,cAAc,GAAG,CACrB,OAAO,EACP,MAAM,EACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,UAAU,EACV,aAAa,EACb,KAAK,EACL,QAAQ,EACR,MAAM,CACP;EACD,OAAO;IACLC,IAAI,EAAE,UAAU;IAChBC,OAAO,EAAE,CAAE,IAAI,CAAE;IACjBC,QAAQ,EAAE;MACRC,QAAQ,EAAG,aAAa;MACxBC,OAAO,EAAE,CACP,KAAK,EACL,IAAI,EACJ,KAAK,EACL,QAAQ,EACR,OAAO,EACP,OAAO,EACP,YAAY,EACZ,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,MAAM,EACN,KAAK,EACL,OAAO,EACP,WAAW,EACX,UAAU,EACV,KAAK,EACL,KAAK,EACL,UAAU,EACV,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,SAAS,EACT,SAAS,EACT,aAAa,EACb,MAAM,EACN,MAAM,EACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,EACN,KAAK,EACL,QAAQ,EACR,SAAS,EACT,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,KAAK,EACL,MAAM,EACN,KAAK,EACL,SAAS,EACT,MAAM,EACN,OAAO,EACP,MAAM,CACP;MACDC,QAAQ,EAAEN,cAAc;MACxBO,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO;IAC3B,CAAC;IACDC,OAAO,EAAE,kBAAkB;IAC3BC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,kBAAkB;MACzBC,SAAS,EAAE;IACb,CAAC,EACDb,IAAI,CAACc,mBAAmB,EACxBd,IAAI,CAACe,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE;MAAEN,OAAO,EAAE;IAAY,CAAC,CAAC,EACtD;MAAE;MACAE,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;MACP;IACF,CAAC,EACD;MAAE;MACAD,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE;IACT,CAAC,EACD;MAAE;MACAD,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE,gBAAgB;MACvBC,SAAS,EAAE;IACb,CAAC,EACD;MAAE;MACFD,KAAK,EAAE,oBAAoB;MACzBC,SAAS,EAAE;IACb,CAAC,EACD;MACEF,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAE,+DAA+D;MACtEC,SAAS,EAAE;IACb,CAAC,EACDb,IAAI,CAACgB,OAAO,CAAChB,IAAI,CAACiB,gBAAgB,EAAE;MAClCN,KAAK,EAAE,QAAQ;MACfE,SAAS,EAAE;IACb,CAAC,CAAC,EACFb,IAAI,CAACgB,OAAO,CAAChB,IAAI,CAACkB,iBAAiB,EAAE;MAAET,OAAO,EAAE;IAAK,CAAC,CAAC,EACvD;MACEE,KAAK,EAAE,QAAQ;MACfQ,QAAQ,EAAE,CACR;QAAEP,KAAK,EAAE;MAA6B,CAAC,EACvC;QAAEA,KAAK,EAAE;MAAuB,CAAC,EACjC;QAAEA,KAAK,EAAE;MAAsB,CAAC,EAChC;QAAEA,KAAK,EAAE;MAAwD,CAAC,CACnE;MACDC,SAAS,EAAE;IACb,CAAC;EAEL,CAAC;AACH;AAEAO,MAAM,CAACC,OAAO,GAAGtB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}