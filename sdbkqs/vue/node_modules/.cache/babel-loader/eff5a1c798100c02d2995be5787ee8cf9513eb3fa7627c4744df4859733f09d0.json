{"ast":null,"code":"/*\r\nLanguage: Coq\r\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\r\nCategory: functional\r\nWebsite: https://coq.inria.fr\r\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  const KEYWORDS = [\"_|0\", \"as\", \"at\", \"cofix\", \"else\", \"end\", \"exists\", \"exists2\", \"fix\", \"for\", \"forall\", \"fun\", \"if\", \"IF\", \"in\", \"let\", \"match\", \"mod\", \"Prop\", \"return\", \"Set\", \"then\", \"Type\", \"using\", \"where\", \"with\", \"Abort\", \"About\", \"Add\", \"Admit\", \"Admitted\", \"All\", \"Arguments\", \"Assumptions\", \"Axiom\", \"Back\", \"BackTo\", \"Backtrack\", \"Bind\", \"Blacklist\", \"Canonical\", \"Cd\", \"Check\", \"Class\", \"Classes\", \"Close\", \"Coercion\", \"Coercions\", \"CoFixpoint\", \"CoInductive\", \"Collection\", \"Combined\", \"Compute\", \"Conjecture\", \"Conjectures\", \"Constant\", \"constr\", \"Constraint\", \"Constructors\", \"Context\", \"Corollary\", \"CreateHintDb\", \"Cut\", \"Declare\", \"Defined\", \"Definition\", \"Delimit\", \"Dependencies\", \"Dependent\", \"Derive\", \"Drop\", \"eauto\", \"End\", \"Equality\", \"Eval\", \"Example\", \"Existential\", \"Existentials\", \"Existing\", \"Export\", \"exporting\", \"Extern\", \"Extract\", \"Extraction\", \"Fact\", \"Field\", \"Fields\", \"File\", \"Fixpoint\", \"Focus\", \"for\", \"From\", \"Function\", \"Functional\", \"Generalizable\", \"Global\", \"Goal\", \"Grab\", \"Grammar\", \"Graph\", \"Guarded\", \"Heap\", \"Hint\", \"HintDb\", \"Hints\", \"Hypotheses\", \"Hypothesis\", \"ident\", \"Identity\", \"If\", \"Immediate\", \"Implicit\", \"Import\", \"Include\", \"Inductive\", \"Infix\", \"Info\", \"Initial\", \"Inline\", \"Inspect\", \"Instance\", \"Instances\", \"Intro\", \"Intros\", \"Inversion\", \"Inversion_clear\", \"Language\", \"Left\", \"Lemma\", \"Let\", \"Libraries\", \"Library\", \"Load\", \"LoadPath\", \"Local\", \"Locate\", \"Ltac\", \"ML\", \"Mode\", \"Module\", \"Modules\", \"Monomorphic\", \"Morphism\", \"Next\", \"NoInline\", \"Notation\", \"Obligation\", \"Obligations\", \"Opaque\", \"Open\", \"Optimize\", \"Options\", \"Parameter\", \"Parameters\", \"Parametric\", \"Path\", \"Paths\", \"pattern\", \"Polymorphic\", \"Preterm\", \"Print\", \"Printing\", \"Program\", \"Projections\", \"Proof\", \"Proposition\", \"Pwd\", \"Qed\", \"Quit\", \"Rec\", \"Record\", \"Recursive\", \"Redirect\", \"Relation\", \"Remark\", \"Remove\", \"Require\", \"Reserved\", \"Reset\", \"Resolve\", \"Restart\", \"Rewrite\", \"Right\", \"Ring\", \"Rings\", \"Save\", \"Scheme\", \"Scope\", \"Scopes\", \"Script\", \"Search\", \"SearchAbout\", \"SearchHead\", \"SearchPattern\", \"SearchRewrite\", \"Section\", \"Separate\", \"Set\", \"Setoid\", \"Show\", \"Solve\", \"Sorted\", \"Step\", \"Strategies\", \"Strategy\", \"Structure\", \"SubClass\", \"Table\", \"Tables\", \"Tactic\", \"Term\", \"Test\", \"Theorem\", \"Time\", \"Timeout\", \"Transparent\", \"Type\", \"Typeclasses\", \"Types\", \"Undelimit\", \"Undo\", \"Unfocus\", \"Unfocused\", \"Unfold\", \"Universe\", \"Universes\", \"Unset\", \"Unshelve\", \"using\", \"Variable\", \"Variables\", \"Variant\", \"Verbose\", \"Visibility\", \"where\", \"with\"];\n  const BUILT_INS = [\"abstract\", \"absurd\", \"admit\", \"after\", \"apply\", \"as\", \"assert\", \"assumption\", \"at\", \"auto\", \"autorewrite\", \"autounfold\", \"before\", \"bottom\", \"btauto\", \"by\", \"case\", \"case_eq\", \"cbn\", \"cbv\", \"change\", \"classical_left\", \"classical_right\", \"clear\", \"clearbody\", \"cofix\", \"compare\", \"compute\", \"congruence\", \"constr_eq\", \"constructor\", \"contradict\", \"contradiction\", \"cut\", \"cutrewrite\", \"cycle\", \"decide\", \"decompose\", \"dependent\", \"destruct\", \"destruction\", \"dintuition\", \"discriminate\", \"discrR\", \"do\", \"double\", \"dtauto\", \"eapply\", \"eassumption\", \"eauto\", \"ecase\", \"econstructor\", \"edestruct\", \"ediscriminate\", \"eelim\", \"eexact\", \"eexists\", \"einduction\", \"einjection\", \"eleft\", \"elim\", \"elimtype\", \"enough\", \"equality\", \"erewrite\", \"eright\", \"esimplify_eq\", \"esplit\", \"evar\", \"exact\", \"exactly_once\", \"exfalso\", \"exists\", \"f_equal\", \"fail\", \"field\", \"field_simplify\", \"field_simplify_eq\", \"first\", \"firstorder\", \"fix\", \"fold\", \"fourier\", \"functional\", \"generalize\", \"generalizing\", \"gfail\", \"give_up\", \"has_evar\", \"hnf\", \"idtac\", \"in\", \"induction\", \"injection\", \"instantiate\", \"intro\", \"intro_pattern\", \"intros\", \"intuition\", \"inversion\", \"inversion_clear\", \"is_evar\", \"is_var\", \"lapply\", \"lazy\", \"left\", \"lia\", \"lra\", \"move\", \"native_compute\", \"nia\", \"nsatz\", \"omega\", \"once\", \"pattern\", \"pose\", \"progress\", \"proof\", \"psatz\", \"quote\", \"record\", \"red\", \"refine\", \"reflexivity\", \"remember\", \"rename\", \"repeat\", \"replace\", \"revert\", \"revgoals\", \"rewrite\", \"rewrite_strat\", \"right\", \"ring\", \"ring_simplify\", \"rtauto\", \"set\", \"setoid_reflexivity\", \"setoid_replace\", \"setoid_rewrite\", \"setoid_symmetry\", \"setoid_transitivity\", \"shelve\", \"shelve_unifiable\", \"simpl\", \"simple\", \"simplify_eq\", \"solve\", \"specialize\", \"split\", \"split_Rabs\", \"split_Rmult\", \"stepl\", \"stepr\", \"subst\", \"sum\", \"swap\", \"symmetry\", \"tactic\", \"tauto\", \"time\", \"timeout\", \"top\", \"transitivity\", \"trivial\", \"try\", \"tryif\", \"unfold\", \"unify\", \"until\", \"using\", \"vm_compute\", \"with\"];\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS\n    },\n    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'), hljs.C_NUMBER_MODE, {\n      className: 'type',\n      excludeBegin: true,\n      begin: '\\\\|\\\\s*',\n      end: '\\\\w+'\n    }, {\n      // relevance booster\n      begin: /[-=]>/\n    }]\n  };\n}\nmodule.exports = coq;","map":{"version":3,"names":["coq","hljs","KEYWORDS","BUILT_INS","name","keywords","keyword","built_in","contains","QUOTE_STRING_MODE","COMMENT","C_NUMBER_MODE","className","excludeBegin","begin","end","module","exports"],"sources":["D:/sdbkqs/bkqs/sdbkqs/vue/node_modules/highlight.js/lib/languages/coq.js"],"sourcesContent":["/*\r\nLanguage: Coq\r\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\r\nCategory: functional\r\nWebsite: https://coq.inria.fr\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction coq(hljs) {\r\n  const KEYWORDS = [\r\n    \"_|0\",\r\n    \"as\",\r\n    \"at\",\r\n    \"cofix\",\r\n    \"else\",\r\n    \"end\",\r\n    \"exists\",\r\n    \"exists2\",\r\n    \"fix\",\r\n    \"for\",\r\n    \"forall\",\r\n    \"fun\",\r\n    \"if\",\r\n    \"IF\",\r\n    \"in\",\r\n    \"let\",\r\n    \"match\",\r\n    \"mod\",\r\n    \"Prop\",\r\n    \"return\",\r\n    \"Set\",\r\n    \"then\",\r\n    \"Type\",\r\n    \"using\",\r\n    \"where\",\r\n    \"with\",\r\n    \"Abort\",\r\n    \"About\",\r\n    \"Add\",\r\n    \"Admit\",\r\n    \"Admitted\",\r\n    \"All\",\r\n    \"Arguments\",\r\n    \"Assumptions\",\r\n    \"Axiom\",\r\n    \"Back\",\r\n    \"BackTo\",\r\n    \"Backtrack\",\r\n    \"Bind\",\r\n    \"Blacklist\",\r\n    \"Canonical\",\r\n    \"Cd\",\r\n    \"Check\",\r\n    \"Class\",\r\n    \"Classes\",\r\n    \"Close\",\r\n    \"Coercion\",\r\n    \"Coercions\",\r\n    \"CoFixpoint\",\r\n    \"CoInductive\",\r\n    \"Collection\",\r\n    \"Combined\",\r\n    \"Compute\",\r\n    \"Conjecture\",\r\n    \"Conjectures\",\r\n    \"Constant\",\r\n    \"constr\",\r\n    \"Constraint\",\r\n    \"Constructors\",\r\n    \"Context\",\r\n    \"Corollary\",\r\n    \"CreateHintDb\",\r\n    \"Cut\",\r\n    \"Declare\",\r\n    \"Defined\",\r\n    \"Definition\",\r\n    \"Delimit\",\r\n    \"Dependencies\",\r\n    \"Dependent\",\r\n    \"Derive\",\r\n    \"Drop\",\r\n    \"eauto\",\r\n    \"End\",\r\n    \"Equality\",\r\n    \"Eval\",\r\n    \"Example\",\r\n    \"Existential\",\r\n    \"Existentials\",\r\n    \"Existing\",\r\n    \"Export\",\r\n    \"exporting\",\r\n    \"Extern\",\r\n    \"Extract\",\r\n    \"Extraction\",\r\n    \"Fact\",\r\n    \"Field\",\r\n    \"Fields\",\r\n    \"File\",\r\n    \"Fixpoint\",\r\n    \"Focus\",\r\n    \"for\",\r\n    \"From\",\r\n    \"Function\",\r\n    \"Functional\",\r\n    \"Generalizable\",\r\n    \"Global\",\r\n    \"Goal\",\r\n    \"Grab\",\r\n    \"Grammar\",\r\n    \"Graph\",\r\n    \"Guarded\",\r\n    \"Heap\",\r\n    \"Hint\",\r\n    \"HintDb\",\r\n    \"Hints\",\r\n    \"Hypotheses\",\r\n    \"Hypothesis\",\r\n    \"ident\",\r\n    \"Identity\",\r\n    \"If\",\r\n    \"Immediate\",\r\n    \"Implicit\",\r\n    \"Import\",\r\n    \"Include\",\r\n    \"Inductive\",\r\n    \"Infix\",\r\n    \"Info\",\r\n    \"Initial\",\r\n    \"Inline\",\r\n    \"Inspect\",\r\n    \"Instance\",\r\n    \"Instances\",\r\n    \"Intro\",\r\n    \"Intros\",\r\n    \"Inversion\",\r\n    \"Inversion_clear\",\r\n    \"Language\",\r\n    \"Left\",\r\n    \"Lemma\",\r\n    \"Let\",\r\n    \"Libraries\",\r\n    \"Library\",\r\n    \"Load\",\r\n    \"LoadPath\",\r\n    \"Local\",\r\n    \"Locate\",\r\n    \"Ltac\",\r\n    \"ML\",\r\n    \"Mode\",\r\n    \"Module\",\r\n    \"Modules\",\r\n    \"Monomorphic\",\r\n    \"Morphism\",\r\n    \"Next\",\r\n    \"NoInline\",\r\n    \"Notation\",\r\n    \"Obligation\",\r\n    \"Obligations\",\r\n    \"Opaque\",\r\n    \"Open\",\r\n    \"Optimize\",\r\n    \"Options\",\r\n    \"Parameter\",\r\n    \"Parameters\",\r\n    \"Parametric\",\r\n    \"Path\",\r\n    \"Paths\",\r\n    \"pattern\",\r\n    \"Polymorphic\",\r\n    \"Preterm\",\r\n    \"Print\",\r\n    \"Printing\",\r\n    \"Program\",\r\n    \"Projections\",\r\n    \"Proof\",\r\n    \"Proposition\",\r\n    \"Pwd\",\r\n    \"Qed\",\r\n    \"Quit\",\r\n    \"Rec\",\r\n    \"Record\",\r\n    \"Recursive\",\r\n    \"Redirect\",\r\n    \"Relation\",\r\n    \"Remark\",\r\n    \"Remove\",\r\n    \"Require\",\r\n    \"Reserved\",\r\n    \"Reset\",\r\n    \"Resolve\",\r\n    \"Restart\",\r\n    \"Rewrite\",\r\n    \"Right\",\r\n    \"Ring\",\r\n    \"Rings\",\r\n    \"Save\",\r\n    \"Scheme\",\r\n    \"Scope\",\r\n    \"Scopes\",\r\n    \"Script\",\r\n    \"Search\",\r\n    \"SearchAbout\",\r\n    \"SearchHead\",\r\n    \"SearchPattern\",\r\n    \"SearchRewrite\",\r\n    \"Section\",\r\n    \"Separate\",\r\n    \"Set\",\r\n    \"Setoid\",\r\n    \"Show\",\r\n    \"Solve\",\r\n    \"Sorted\",\r\n    \"Step\",\r\n    \"Strategies\",\r\n    \"Strategy\",\r\n    \"Structure\",\r\n    \"SubClass\",\r\n    \"Table\",\r\n    \"Tables\",\r\n    \"Tactic\",\r\n    \"Term\",\r\n    \"Test\",\r\n    \"Theorem\",\r\n    \"Time\",\r\n    \"Timeout\",\r\n    \"Transparent\",\r\n    \"Type\",\r\n    \"Typeclasses\",\r\n    \"Types\",\r\n    \"Undelimit\",\r\n    \"Undo\",\r\n    \"Unfocus\",\r\n    \"Unfocused\",\r\n    \"Unfold\",\r\n    \"Universe\",\r\n    \"Universes\",\r\n    \"Unset\",\r\n    \"Unshelve\",\r\n    \"using\",\r\n    \"Variable\",\r\n    \"Variables\",\r\n    \"Variant\",\r\n    \"Verbose\",\r\n    \"Visibility\",\r\n    \"where\",\r\n    \"with\"\r\n  ];\r\n  const BUILT_INS = [\r\n    \"abstract\",\r\n    \"absurd\",\r\n    \"admit\",\r\n    \"after\",\r\n    \"apply\",\r\n    \"as\",\r\n    \"assert\",\r\n    \"assumption\",\r\n    \"at\",\r\n    \"auto\",\r\n    \"autorewrite\",\r\n    \"autounfold\",\r\n    \"before\",\r\n    \"bottom\",\r\n    \"btauto\",\r\n    \"by\",\r\n    \"case\",\r\n    \"case_eq\",\r\n    \"cbn\",\r\n    \"cbv\",\r\n    \"change\",\r\n    \"classical_left\",\r\n    \"classical_right\",\r\n    \"clear\",\r\n    \"clearbody\",\r\n    \"cofix\",\r\n    \"compare\",\r\n    \"compute\",\r\n    \"congruence\",\r\n    \"constr_eq\",\r\n    \"constructor\",\r\n    \"contradict\",\r\n    \"contradiction\",\r\n    \"cut\",\r\n    \"cutrewrite\",\r\n    \"cycle\",\r\n    \"decide\",\r\n    \"decompose\",\r\n    \"dependent\",\r\n    \"destruct\",\r\n    \"destruction\",\r\n    \"dintuition\",\r\n    \"discriminate\",\r\n    \"discrR\",\r\n    \"do\",\r\n    \"double\",\r\n    \"dtauto\",\r\n    \"eapply\",\r\n    \"eassumption\",\r\n    \"eauto\",\r\n    \"ecase\",\r\n    \"econstructor\",\r\n    \"edestruct\",\r\n    \"ediscriminate\",\r\n    \"eelim\",\r\n    \"eexact\",\r\n    \"eexists\",\r\n    \"einduction\",\r\n    \"einjection\",\r\n    \"eleft\",\r\n    \"elim\",\r\n    \"elimtype\",\r\n    \"enough\",\r\n    \"equality\",\r\n    \"erewrite\",\r\n    \"eright\",\r\n    \"esimplify_eq\",\r\n    \"esplit\",\r\n    \"evar\",\r\n    \"exact\",\r\n    \"exactly_once\",\r\n    \"exfalso\",\r\n    \"exists\",\r\n    \"f_equal\",\r\n    \"fail\",\r\n    \"field\",\r\n    \"field_simplify\",\r\n    \"field_simplify_eq\",\r\n    \"first\",\r\n    \"firstorder\",\r\n    \"fix\",\r\n    \"fold\",\r\n    \"fourier\",\r\n    \"functional\",\r\n    \"generalize\",\r\n    \"generalizing\",\r\n    \"gfail\",\r\n    \"give_up\",\r\n    \"has_evar\",\r\n    \"hnf\",\r\n    \"idtac\",\r\n    \"in\",\r\n    \"induction\",\r\n    \"injection\",\r\n    \"instantiate\",\r\n    \"intro\",\r\n    \"intro_pattern\",\r\n    \"intros\",\r\n    \"intuition\",\r\n    \"inversion\",\r\n    \"inversion_clear\",\r\n    \"is_evar\",\r\n    \"is_var\",\r\n    \"lapply\",\r\n    \"lazy\",\r\n    \"left\",\r\n    \"lia\",\r\n    \"lra\",\r\n    \"move\",\r\n    \"native_compute\",\r\n    \"nia\",\r\n    \"nsatz\",\r\n    \"omega\",\r\n    \"once\",\r\n    \"pattern\",\r\n    \"pose\",\r\n    \"progress\",\r\n    \"proof\",\r\n    \"psatz\",\r\n    \"quote\",\r\n    \"record\",\r\n    \"red\",\r\n    \"refine\",\r\n    \"reflexivity\",\r\n    \"remember\",\r\n    \"rename\",\r\n    \"repeat\",\r\n    \"replace\",\r\n    \"revert\",\r\n    \"revgoals\",\r\n    \"rewrite\",\r\n    \"rewrite_strat\",\r\n    \"right\",\r\n    \"ring\",\r\n    \"ring_simplify\",\r\n    \"rtauto\",\r\n    \"set\",\r\n    \"setoid_reflexivity\",\r\n    \"setoid_replace\",\r\n    \"setoid_rewrite\",\r\n    \"setoid_symmetry\",\r\n    \"setoid_transitivity\",\r\n    \"shelve\",\r\n    \"shelve_unifiable\",\r\n    \"simpl\",\r\n    \"simple\",\r\n    \"simplify_eq\",\r\n    \"solve\",\r\n    \"specialize\",\r\n    \"split\",\r\n    \"split_Rabs\",\r\n    \"split_Rmult\",\r\n    \"stepl\",\r\n    \"stepr\",\r\n    \"subst\",\r\n    \"sum\",\r\n    \"swap\",\r\n    \"symmetry\",\r\n    \"tactic\",\r\n    \"tauto\",\r\n    \"time\",\r\n    \"timeout\",\r\n    \"top\",\r\n    \"transitivity\",\r\n    \"trivial\",\r\n    \"try\",\r\n    \"tryif\",\r\n    \"unfold\",\r\n    \"unify\",\r\n    \"until\",\r\n    \"using\",\r\n    \"vm_compute\",\r\n    \"with\"\r\n  ];\r\n  return {\r\n    name: 'Coq',\r\n    keywords: {\r\n      keyword: KEYWORDS,\r\n      built_in: BUILT_INS\r\n    },\r\n    contains: [\r\n      hljs.QUOTE_STRING_MODE,\r\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\r\n      hljs.C_NUMBER_MODE,\r\n      {\r\n        className: 'type',\r\n        excludeBegin: true,\r\n        begin: '\\\\|\\\\s*',\r\n        end: '\\\\w+'\r\n      },\r\n      { // relevance booster\r\n        begin: /[-=]>/ }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = coq;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}