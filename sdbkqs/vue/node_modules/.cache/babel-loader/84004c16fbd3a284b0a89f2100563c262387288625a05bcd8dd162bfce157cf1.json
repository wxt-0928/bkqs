{"ast":null,"code":"require(\"core-js/modules/es.array.unshift.js\");\n/*\r\nLanguage: Leaf\r\nDescription: A Swift-based templating language created for the Vapor project.\r\nWebsite: https://docs.vapor.codes/leaf/overview\r\nCategory: template\r\n*/\n\nfunction leaf(hljs) {\n  const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;\n  const LITERALS = ['true', 'false', 'in'];\n  const PARAMS = {\n    scope: 'params',\n    begin: /\\(/,\n    end: /\\)(?=\\:?)/,\n    endsParent: true,\n    relevance: 7,\n    contains: [{\n      scope: 'string',\n      begin: '\"',\n      end: '\"'\n    }, {\n      scope: 'keyword',\n      match: LITERALS.join(\"|\")\n    }, {\n      scope: 'variable',\n      match: /[A-Za-z_][A-Za-z_0-9]*/\n    }, {\n      scope: 'operator',\n      match: /\\+|\\-|\\*|\\/|\\%|\\=\\=|\\=|\\!|\\>|\\<|\\&\\&|\\|\\|/\n    }]\n  };\n  const INSIDE_DISPATCH = {\n    match: [IDENT, /(?=\\()/],\n    scope: {\n      1: \"keyword\"\n    },\n    contains: [PARAMS]\n  };\n  PARAMS.contains.unshift(INSIDE_DISPATCH);\n  return {\n    name: 'Leaf',\n    contains: [\n    // #ident():\n    {\n      match: [/#+/, IDENT, /(?=\\()/],\n      scope: {\n        1: \"punctuation\",\n        2: \"keyword\"\n      },\n      // will start up after the ending `)` match from line ~44\n      // just to grab the trailing `:` if we can match it\n      starts: {\n        contains: [{\n          match: /\\:/,\n          scope: \"punctuation\"\n        }]\n      },\n      contains: [PARAMS]\n    },\n    // #ident or #ident:\n    {\n      match: [/#+/, IDENT, /:?/],\n      scope: {\n        1: \"punctuation\",\n        2: \"keyword\",\n        3: \"punctuation\"\n      }\n    }]\n  };\n}\nmodule.exports = leaf;","map":{"version":3,"names":["leaf","hljs","IDENT","LITERALS","PARAMS","scope","begin","end","endsParent","relevance","contains","match","join","INSIDE_DISPATCH","unshift","name","starts","module","exports"],"sources":["D:/sdbkqs/bkqs/sdbkqs/vue/node_modules/highlight.js/lib/languages/leaf.js"],"sourcesContent":["/*\r\nLanguage: Leaf\r\nDescription: A Swift-based templating language created for the Vapor project.\r\nWebsite: https://docs.vapor.codes/leaf/overview\r\nCategory: template\r\n*/\r\n\r\nfunction leaf(hljs) {\r\n  const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;\r\n  const LITERALS = [\r\n    'true',\r\n    'false',\r\n    'in'\r\n  ];\r\n  const PARAMS = {\r\n    scope: 'params',\r\n    begin: /\\(/,\r\n    end: /\\)(?=\\:?)/,\r\n    endsParent: true,\r\n    relevance: 7,\r\n    contains: [\r\n      {\r\n        scope: 'string',\r\n        begin: '\"',\r\n        end: '\"'\r\n      },\r\n      {\r\n        scope: 'keyword',\r\n        match: LITERALS.join(\"|\"),\r\n      },\r\n      {\r\n        scope: 'variable',\r\n        match: /[A-Za-z_][A-Za-z_0-9]*/\r\n      },\r\n      {\r\n        scope: 'operator',\r\n        match: /\\+|\\-|\\*|\\/|\\%|\\=\\=|\\=|\\!|\\>|\\<|\\&\\&|\\|\\|/\r\n      }\r\n    ]\r\n  };\r\n  const INSIDE_DISPATCH = {\r\n    match: [\r\n      IDENT,\r\n      /(?=\\()/,\r\n    ],\r\n    scope: {\r\n      1: \"keyword\"\r\n    },\r\n    contains: [ PARAMS ]\r\n  };\r\n  PARAMS.contains.unshift(INSIDE_DISPATCH);\r\n  return {\r\n    name: 'Leaf',\r\n    contains: [\r\n      // #ident():\r\n      {\r\n        match: [\r\n          /#+/,\r\n          IDENT,\r\n          /(?=\\()/,\r\n        ],\r\n        scope: {\r\n          1: \"punctuation\",\r\n          2: \"keyword\"\r\n        },\r\n        // will start up after the ending `)` match from line ~44\r\n        // just to grab the trailing `:` if we can match it\r\n        starts: {\r\n          contains: [\r\n            {\r\n              match: /\\:/,\r\n              scope: \"punctuation\"\r\n            }\r\n          ]\r\n        },\r\n        contains: [\r\n          PARAMS\r\n        ],\r\n      },\r\n      // #ident or #ident:\r\n      {\r\n        match: [\r\n          /#+/,\r\n          IDENT,\r\n          /:?/,\r\n        ],\r\n        scope: {\r\n          1: \"punctuation\",\r\n          2: \"keyword\",\r\n          3: \"punctuation\"\r\n        }\r\n      },\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = leaf;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAIA,CAACC,IAAI,EAAE;EAClB,MAAMC,KAAK,GAAG,2BAA2B;EACzC,MAAMC,QAAQ,GAAG,CACf,MAAM,EACN,OAAO,EACP,IAAI,CACL;EACD,MAAMC,MAAM,GAAG;IACbC,KAAK,EAAE,QAAQ;IACfC,KAAK,EAAE,IAAI;IACXC,GAAG,EAAE,WAAW;IAChBC,UAAU,EAAE,IAAI;IAChBC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,CACR;MACEL,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,GAAG;MACVC,GAAG,EAAE;IACP,CAAC,EACD;MACEF,KAAK,EAAE,SAAS;MAChBM,KAAK,EAAER,QAAQ,CAACS,IAAI,CAAC,GAAG;IAC1B,CAAC,EACD;MACEP,KAAK,EAAE,UAAU;MACjBM,KAAK,EAAE;IACT,CAAC,EACD;MACEN,KAAK,EAAE,UAAU;MACjBM,KAAK,EAAE;IACT,CAAC;EAEL,CAAC;EACD,MAAME,eAAe,GAAG;IACtBF,KAAK,EAAE,CACLT,KAAK,EACL,QAAQ,CACT;IACDG,KAAK,EAAE;MACL,CAAC,EAAE;IACL,CAAC;IACDK,QAAQ,EAAE,CAAEN,MAAM;EACpB,CAAC;EACDA,MAAM,CAACM,QAAQ,CAACI,OAAO,CAACD,eAAe,CAAC;EACxC,OAAO;IACLE,IAAI,EAAE,MAAM;IACZL,QAAQ,EAAE;IACR;IACA;MACEC,KAAK,EAAE,CACL,IAAI,EACJT,KAAK,EACL,QAAQ,CACT;MACDG,KAAK,EAAE;QACL,CAAC,EAAE,aAAa;QAChB,CAAC,EAAE;MACL,CAAC;MACD;MACA;MACAW,MAAM,EAAE;QACNN,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,IAAI;UACXN,KAAK,EAAE;QACT,CAAC;MAEL,CAAC;MACDK,QAAQ,EAAE,CACRN,MAAM;IAEV,CAAC;IACD;IACA;MACEO,KAAK,EAAE,CACL,IAAI,EACJT,KAAK,EACL,IAAI,CACL;MACDG,KAAK,EAAE;QACL,CAAC,EAAE,aAAa;QAChB,CAAC,EAAE,SAAS;QACZ,CAAC,EAAE;MACL;IACF,CAAC;EAEL,CAAC;AACH;AAEAY,MAAM,CAACC,OAAO,GAAGlB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}